#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 35    // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors/num_word.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define NUM 1

/ {
    zip_scroll_scaler: zip_scroll_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_WHEEL INPUT_REL_HWHEEL>;
        track-remainders;
    };
};

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <0>;      // 0
    time-to-max-speed-ms = <0>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <400>;
    acceleration-exponent = <1>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    macros {
        ToLayer1: Layer1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F19 &to 1>;
            label = "LAYER1";
        };

        ToLayer0: Layer_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp F20 &to 0>;
            label = "LAYER_0";
        };
    };

    behaviors {
        my_mt_left: my_mt_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            bindings = <&kp>, <&kp>;

            display-name = "Mod-Tap";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <14 15 16 17 14 15 16 17 18 27 28 29 30 31 40 41 42 43 44>;
            label = "mt_left";
        };

        nav_word: nav_word {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <LEFT DOWN UP RIGHT PG_DN PG_UP>;
            ignore-modifiers;
        };

        swap: swapper {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LEFT_GUI>, <&kp TAB>, <&kt LEFT_GUI>;

            ignored-key-positions = <1>;
        };

        my_mt_right: my_mt_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            bindings = <&kp>, <&kp>;

            display-name = "Mod-Tap";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            label = "mt_right";
            hold-trigger-key-positions = <20 21 22 23 24 33 34 35 36 37 46 47 48 49 50>;
        };

        delete_morph: delete_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DELETE_MORPH";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        new_behavior2: new_behavior2 {
            compatible = "zmk,behavior-mod-morph";
            label = "NEW_BEHAVIOR2";
            bindings = <&kp S>, <&kp P>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        new_behavior3: new_behavior3 {
            compatible = "zmk,behavior-hold-tap";
            label = "NEW_BEHAVIOR3";
            bindings = <&new_behavior5>, <&new_behavior4>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
        };

        new_behavior4: new_behavior4 {
            compatible = "zmk,behavior-tap-dance";
            label = "NEW_BEHAVIOR4";
            #binding-cells = <0>;
            bindings = <&new_behavior2>, <&kp W>, <&kp O>;

            tapping-term-ms = <400>;
        };

        new_behavior5: new_behavior5 {
            compatible = "zmk,behavior-mod-morph";
            label = "NEW_BEHAVIOR5";
            bindings = <&kp V>, <&kp LS(V)>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        bootloarder_dongle {
            bindings = <&bootloader>;
            key-positions = <30>;
            layers = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp ESC           &kp N1      &kp N2                  &kp N3                      &kp N4                 &kp N5       &kp UP_ARROW     &kp N6     &kp N7                       &kp N8                       &kp N9                   &kp N0      &kp BACKSPACE
&kp TAB           &kp Q       &kp W                   &kp E                       &kp R                  &kp T        &kp DOWN_ARROW   &kp Y      &kp U                        &kp I                        &kp O                    &kp P       &kp BSLH
&kp CAPS          &kp A       &my_mt_left LEFT_ALT S  &my_mt_left LEFT_COMMAND D  &my_mt_left LCTRL F    &kp G        &kp LEFT_ARROW   &kp H      &my_mt_right LEFT_CONTROL J  &my_mt_right LEFT_COMMAND K  &my_mt_right LEFT_ALT L  &kp SEMI    &kp APOS
&kp LSHFT         &kp Z       &kp X                   &kp C                       &kp V                  &kp B        &kp RIGHT_ARROW  &kp N      &kp M                        &kp COMMA                    &kp DOT                  &kp FSLH    &kp ENTER
&kp K_PLAY_PAUSE  &caps_word  &swap                   &kp LG(SPACE)               &mt LEFT_SHIFT ESCAPE  &nav_word    &kp ENTER        &kp SPACE  &mt RIGHT_ALT RETURN         &mo 3                        &kp RIGHT_SHIFT          &kp DELETE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        Num {
            bindings = <
&kp GRAVE   &kp F1        &kp F2        &kp F3        &kp F4        &kp MINUS       &mmv MOVE_UP     &kp F6           &kp F7           &kp F8      &kp F9     &kp F10           &trans
&trans      &kp GRAVE     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp ASTERISK    &mmv MOVE_DOWN   &kp PG_UP        &kp END          &kp UP      &kp HOME   &kp MINUS         &kp EQUAL
&trans      &kp TILDE     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS        &mmv MOVE_LEFT   &kp PG_DN        &kp LEFT         &kp DOWN    &kp RIGHT  &kp LEFT_BRACKET  &kp RIGHT_BRACKET
&trans      &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH       &mmv MOVE_RIGHT  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp INSERT  &kp F11    &kp F12           &trans
&kp C_MUTE  &trans        &trans        &trans        &trans        &trans          &mkp LCLK        &trans           &trans           &to 0       &trans     &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&scroll_encoder>;
        };

        layer_2 {
            bindings = <
&kp TILDE  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &mmv MOVE_UP     &kp F6  &kp F7  &kp F8      &kp F9     &kp F10      &trans
&trans     &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &mmv MOVE_DOWN   &trans  &trans  &kp F11     &kp F12    &kp UNDER    &kp PLUS
&trans     &out OUT_USB  &out OUT_BLE    &trans        &trans        &trans          &mmv MOVE_LEFT   &trans  &trans  &trans      &trans     &kp LBRC     &kp RBRC
&trans     &sys_reset    &trans          &bootloader   &trans        &trans          &mmv MOVE_RIGHT  &trans  &trans  &sys_reset  &soft_off  &bootloader  &trans
&trans     &trans        &trans          &trans        &trans        &trans          &mkp LCLK        &trans  &trans  &trans      &trans     &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        System {
            bindings = <
&trans  &trans  &trans  &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &soft_off  &to 0     &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
